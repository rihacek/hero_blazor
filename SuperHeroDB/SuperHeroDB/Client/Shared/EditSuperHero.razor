@inject ISuperHeroService SuperHeroService
@inject IJSRuntime JSRuntime

@if(@Hero.Id == 0)
{
    <h3>Create a new Hero</h3>

}
else
{
    <h3>Edit '@Hero.HeroName'</h3>

}

<EditForm Model="Hero" OnSubmit="HandleSubmit">
    @* look at bootstrap form components for more ways to format your forms *@
    <div class="form-group">
        <label>First Name</label>
        <InputText @bind-Value="Hero.FirstName" class="form-control" placeholder="First Name"></InputText>
    </div>
    <div class="form-group">
        <label>Last Name</label>
    <InputText @bind-Value="Hero.LastName" class="form-control" placeholder="Last Name"></InputText>
    </div>
    <div class="form-group">
        <label>Hero Name</label>
        <InputText @bind-Value="Hero.HeroName" class="form-control" placeholder="Hero Name"></InputText>
        <small class="form-text text-muted">The name we all know.</small>
    </div>
    <div class="form-group">
        <label>Comic</label><br />
        <InputRadioGroup @bind-Value="comicId" class="form-control">
            @foreach (var comic in SuperHeroService.Comics)
            {
                <InputRadio Value="@comic.Id" /><span>@comic.Name</span><br />
            }
        </InputRadioGroup>
    </div>
        <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {

    [Parameter]
    public SuperHeroDB.Shared.SuperHero Hero { get; set; } = new SuperHeroDB.Shared.SuperHero();
    int comicId = 1;

    protected override async Task OnParametersSetAsync()
    {
        await SuperHeroService.GetComics();
        comicId = Hero.Comic.Id;

    }

    async void HandleSubmit()
    {

        Hero.Comic = SuperHeroService.Comics.FirstOrDefault(c => c.Id == comicId);
        //is this a create or an update?  check that zero from the model
        //todo - would probably use a separate page (off the hero single maybe) 
        // for updates so that we don't need to distinguish
        if(Hero.Id == 0) //could also use a flag other than ID, but that sounds stinky to me (technical details within model)
        {
            await SuperHeroService.CreateSuperHero(Hero);
        }
        else
        {
            await SuperHeroService.UpdateSuperHero(Hero, Hero.Id);//don't really need the id parameter here - could just get it from the hero object, but w/e
        }

        await JSRuntime.InvokeVoidAsync("console.log", Hero);

    }

}

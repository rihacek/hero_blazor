@inject ISuperHeroService SuperHeroService
@inject IJSRuntime JSRuntime

<h3>EditSuperHero</h3>

<EditForm Model="Hero" OnSubmit="HandleSubmit">
    @* look at bootstrap form components for more ways to format your forms *@
    <div class="form-group">
        <label>First Name</label>
        <InputText @bind-Value="Hero.FirstName" class="form-control" placeholder="First Name"></InputText>
    </div>
    <div class="form-group">
        <label>Last Name</label>
    <InputText @bind-Value="Hero.LastName" class="form-control" placeholder="Last Name"></InputText>
    </div>
    <div class="form-group">
        <label>Hero Name</label>
        <InputText @bind-Value="Hero.HeroName" class="form-control" placeholder="Hero Name"></InputText>
        <small class="form-text text-muted">The name we all know.</small>
    </div>
    <div class="form-group">
        <label>Comic</label><br />
        <InputRadioGroup @bind-Value="comicId" class="form-control">
            @foreach (var comic in SuperHeroService.Comics)
            {
                <InputRadio Value="@comic.Id" /><span>@comic.Name</span><br />
            }
        </InputRadioGroup>
    </div>
        <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
    public SuperHeroDB.Shared.SuperHero Hero { get; set; } = new SuperHeroDB.Shared.SuperHero();
    int comicId = 1;
    protected override async Task OnInitializedAsync()
    {
        await SuperHeroService.GetComics();
    }

    async void HandleSubmit()
    {
        Hero.Comic = SuperHeroService.Comics.FirstOrDefault(c => c.Id == comicId);
        Console.WriteLine("Submit was called!");
        JSRuntime.InvokeVoidAsync("console.log", Hero);

        await SuperHeroService.CreateSuperHero(Hero);
    }

}
